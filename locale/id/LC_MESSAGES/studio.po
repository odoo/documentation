# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-TODAY, Odoo S.A.
# This file is distributed under the same license as the Odoo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Odoo 14.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-04 11:02+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../studio.rst:5
msgid "Studio"
msgstr ""

#: ../../studio/concepts.rst:3
msgid "Concepts"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:3
msgid "Understanding Automated Actions"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:6
msgid "Automated actions are used to trigger actions. They are based on conditions and happen on top of Odoo’s default business logic."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:9
msgid "Examples of automated actions include: creating a next activity upon a quote's confirmation; adding a user as a follower of a confirmed invoice if its total is higher than a certain amount; or preventing a lead from changing stage if a field is not filled in."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:16
msgid "Let's understand how to properly define *when* an automated action runs and *how* to create one:"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:18
msgid "The first step is to choose the :doc:`Model <understanding_general>` on which the action is applied."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:19
msgid "The **Trigger** field defines the event that causes the automated action to happen:"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:21
msgid "*On Creation*: when a new record is created. Note that the record is created once saved for the first time."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:23
msgid "*On Update*: when the record is updated. Note that the update happens once the record is saved."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:24
msgid "*On Creation & Update*: on the creation and/or on the update of a record once the form is saved."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:25
msgid "*On Deletion*: on the removal of a record under the condition set."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:26
msgid "*Based on Form Modification*: when the value of the specified *Trigger* field is changed in the interface (user sees the changes before saving the record). Note that this action can only be used with the *Execute Python Code* action type."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:29
msgid "*Based on Timed Condition*: a delay happens after a specific date/time. Set a *Delay after trigger date* if you need a delay to happen before the *Trigger Date*. Example: to send a reminder 15min before a meeting. If the date/time is not set on the form of the model chosen, the date/time considered is the one of the creation/update of the record."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:34
msgid "For every Trigger option, **conditions** can be applied, such as:"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:36
msgid "*Before Update Domain*: if designated, this condition must be satisfied before the record is updated."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:38
msgid "*Apply on*: if designated, this condition must be satisfied before executing the action rule (*Action To Do*), and after the update."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:41
msgid "The **Active** option is to be turned off when the rule should be hidden and not executed."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:43
msgid "Under **Action To Do** choose the type of server action that must be executed once records meet the *Trigger* conditions:"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:45
msgid "*Execute Python Code*: a block of code is executed. A *Help* tab with the variables that can be used is available."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:47
msgid "*Create New Record*: a new record with new values is created."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:48
msgid "*Update a Record*: updates the record that triggered the action."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:49
msgid "*Execute several actions*: defines an action that triggers other server actions."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:50
msgid "*Send Email*: an automatic :doc:`email <../../discuss/advanced/email_template>` is sent."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:51
msgid "*Add Followers*: followers are notified of changes in the task."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:52
msgid "*Create Next Activity*: creates an activity such as: *Call*, *Email*, *Reminder*."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:53
msgid "*Send SMS Text Message*: sends an :doc:`SMS <../../sms_marketing/pricing/pricing_and_faq>`."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:56
msgid "Example"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:58
msgid "This is the process of which the update of the *Email* field on the Lead/Opportunity *Model*, with a *Trigger Condition* set to *On Update*, goes through:"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:65
msgid "The user creates the record without an email address set."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:66
msgid "The user updates the record defining an email address."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:67
msgid "Once the change is saved, the automation checks if any of the *Watched Fields* are being updated (for the example: field name *email_from* (Email)."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:69
msgid "If true, it checks if the record matches the *Before Update Domain* (for the example: *email is not set*)."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:71
msgid "If true, it checks (*after the update*) whether the record matches the *Apply on* domain (for the example: *email is set*)."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:73
msgid "If true, the chosen *Action To Do* is performed on the record."
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:76
msgid ":doc:`understanding_general`"
msgstr ""

#: ../../studio/concepts/understanding_automated_actions.rst:77
msgid ":doc:`../use_cases/automated_actions`"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:3
msgid "Understanding General Concepts"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:7
msgid "Odoo Studio is a toolbox that allows you to add models or adapt functionalities on top of Odoo’s standard behavior without coding knowledge. You can also create custom views and modify existing ones without having to get into the XML code."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:11
msgid "Even for experienced developers, typing out code requires time. By using Odoo Studio, you can quickly get your models up and going and focus on the crucial parts of your application. The result is a user-friendly solution that makes customizations and designing new applications easy with or without programming skills."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:15
msgid "Getting started"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:17
msgid "One you start using Odoo Studio, you automatically create a new *module* that contains all your modifications. These modifications can be done on existing screens (*views*), by adding new *fields* in existing applications, or by creating an entirely new *model*."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:22
msgid "What is a Module?"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:25
msgid "An Odoo **Module** can contain a number of elements, such as: business objects (models), object views, data files, web controllers, and static web data. An application is a collection of modules."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:29
msgid "In object-oriented programming, models usually represent a concept from the real world. Example: Odoo has models for Sales Orders, Users, Countries, etc. If you were to build an application to manage Real Estate sales, a model that represents the Properties for sale would probably be your first step."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:38
msgid "What is a Model (also called Object)?"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:40
msgid "A **Model** determines the logical structure of a database and fundamentally determines in which manner data can be stored, organized, and manipulated. In other words, a model is a table of information that can be bridged with other tables."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:45
msgid "What are Fields?"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:47
msgid "**Fields** compose models. It is where a record (a piece of data) is registered."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:49
msgid "Example: on the Real Estate application, fields on the Properties model would include the price, address, a picture, a link to the current owner, etc."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:50
msgid "There are 2 main types of fields in Odoo: *basic (or scalar) fields* and *relational fields*."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:53
msgid "Basic fields represent simple values, like numbers or text. Relational fields represent relations between models. So, if you have a model for *Customers* and another one for *Properties*, you would use a relational field to link each Property to its Customer."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:56
msgid "Relational Fields in detail"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:59
msgid "**Relational Fields** provide the option to link the data of one model with the data of another model."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:60
msgid "In Odoo, relational field types are: *One2many*, *Many2one*, *Many2many*."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:66
msgid "An **One2many** field is a *one-way* direction of selecting *multiple* records from a table."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:68
msgid "Example: a Sales Order can contain multiple Sales Order Lines, which also contain multiple fields of information."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:69
msgid "A **Many2one** field is a *one-way* direction of selecting *one* record from a table."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:70
msgid "Example: you can have many product categories, but each product can only belong to one category."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:71
msgid "A **Many2many** field is a *two-way* direction of selecting records from a table."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:72
msgid "Example: multiple tags can be added to a lead’s form."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:75
msgid "An *One2many* field must have a *Many2one* related to it."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:78
msgid "What are Views?"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:80
msgid "**Views** define how records are displayed. They are specified in XML which means that they can be edited independently from the models that they represent. There are various types of views in Odoo, and each of them represents a mode of visualization. Some examples are: *form*, *list*, *kanban*."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:85
msgid "What is a Menu?"
msgstr ""

#: ../../studio/concepts/understanding_general.rst:87
msgid "A **Menu** is a button that executes and action. In Odoo Studio, to create menus (models) and rearrange their hierarchy, click on *Edit Menu*."
msgstr ""

#: ../../studio/concepts/understanding_general.rst:95
msgid "`Studio Basics <https://www.odoo.com/fr_FR/slides/studio-31>`_"
msgstr ""

#: ../../studio/how_to.rst:3
msgid "How To"
msgstr ""

#: ../../studio/how_to/export_import.rst:3
msgid "Export and Import Modules"
msgstr ""

#: ../../studio/how_to/export_import.rst:5
msgid "When you do customizations in Odoo Studio, a new module is created in your database, making it easy to use Studio for prototyping."
msgstr ""

#: ../../studio/how_to/export_import.rst:8
msgid "To export these customizations, activate Studio on the main dashboard and, under the menu *Customizations*, click on *Export*. The default filename is *customizations.zip*."
msgstr ""

#: ../../studio/how_to/export_import.rst:16
msgid "The module created contains the definition of custom models and fields, as well as the UI elements of any customization in an XML format."
msgstr ""

#: ../../studio/how_to/export_import.rst:18
msgid "To import and install the customizations in another instance, connect to the destination database, activate Studio and, under *Customizations*, click on *Import*."
msgstr ""

#: ../../studio/how_to/export_import.rst:25
msgid "Studio does not know which apps are customized (because the same view can be modified on different apps), therefore, it *does not* add the underlying modules as dependencies of the exported module. In other words, the applications installed on the source database should be installed on the destination database."
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:3
msgid "Customizing the Rainbow Man"
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:5
msgid "The Rainbow Man in Odoo is an animation shown once the user completes certain tasks and clicks on certain buttons. It is a way to make the software fun to use, and rewarding, for employees."
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:13
msgid "On most buttons in Odoo, such as *Send by Email*, *Confirm* or *Cancel*, once they are selected in Studio, under their *Properties*, the *Rainbow Man* effect can be applied."
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:14
msgid "By default, the feature is active:"
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:16
msgid "when opportunities are marked as won;"
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:17
msgid "when users empty their inboxes;"
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:18
msgid "when the user finishes a tour;"
msgstr ""

#: ../../studio/how_to/rainbow_man.rst:19
msgid "when the user finishes doing reconciliations."
msgstr ""

#: ../../studio/how_to/reports.rst:3
msgid "Customizing Reports"
msgstr ""

#: ../../studio/how_to/reports.rst:9
msgid "Odoo uses HTML and CSS technologies to create reports. HTML is a markup language that uses tags, also called elements. It is the core of any webpage because it provides its basic structure. CSS interacts with HTML elements to add style to the page, establishing how the HTML is shown to the user. Odoo’s reports also use Bootstrap’s grid layout, which is the containers, rows, and columns to align content, and support Odoo's website themes."
msgstr ""

#: ../../studio/how_to/reports.rst:11
msgid "When creating a new report, choose the purpose of it and if you would like the report to include header and footer (company logo, name, address, phone, email address, etc.)."
msgstr ""

#: ../../studio/how_to/reports.rst:17
msgid "Under the tab **Add**, you find the fields to be dragged and dropped to the view. *Fields*, *Data tables*, *Subtotal & Total*, and *Address Book* are dynamic elements (meaning that they need a :doc:`one2many or a many2many <../concepts/understanding_general>` related object). *Text*, *Title Block*, *Image*, and *Text in Cell* are static elements."
msgstr ""

#: ../../studio/how_to/reports.rst:26
msgid "Once the element is added to the view, select it to see its **Options**. The first section shows the hierarchy of the selected object and its properties, allowing you to individually edit them. Fields with related objects have their directives shown on *Field Expression*."
msgstr ""

#: ../../studio/how_to/reports.rst:34
msgid "Under **Visible if**, define the rule(s) to set visibility conditions to fields."
msgstr ""

#: ../../studio/how_to/reports.rst:36
msgid "Example: if choosing to display a product image, you could set a visibility rule to only display the ones that are *set* in the product form, avoiding having a plain icon when they are not set."
msgstr ""

#: ../../studio/how_to/reports.rst:40
msgid "**Visible for** is used to set which :doc:`groups <../../general/odoo_basics/add_user>` can have access to specific elements in the report. **Limit visibility to groups**, under *Report*, sets the visibility of the report to specifics groups, meaning that users belonging to other groups do not see the same final document."
msgstr ""

#: ../../studio/how_to/reports.rst:46
msgid "Under the **Report** tab, name your report, choose the paper format, and if the report should be added to the *Print* menu list on its respective document form."
msgstr ""

#: ../../studio/how_to/reports.rst:53
msgid "If activating the :doc:`Developer mode <../../general/developer_mode/activate>`, additional fields such as *Class* under *Options*, and *Reload from attachment* under *Report*, become visible."
msgstr ""

#: ../../studio/how_to/reports.rst:56
msgid "*Class*: add custom CSS classes to the selected element (e.g. Bootstrap classes such as *text-danger*)."
msgstr ""

#: ../../studio/how_to/reports.rst:59
msgid "*Reload from attachment*: saves the report as an attachment of the document when printed. When the report is reprinted, it re-downloads that attachment instead of re-printing it. This means that if the underlying record (e.g. Invoice) changes when compared to the first impression, the report does not reflect the changes because they were done after the attachment was created. This is typically useful for reports linked to documents that should not change, such as Invoices."
msgstr ""

#: ../../studio/how_to/reports.rst:67
msgid "Actions in Odoo Studio can be undone until you *Close* the toolbox. Once you have closed Studio, changes can not be undone anymore."
msgstr ""

#: ../../studio/use_cases.rst:3
msgid "Use Cases"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:3
msgid "Advanced Use Cases: Automated Actions"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:5
msgid "**Case scenario 1: when a Belgian lead is created, a 3-stars priority should be automatically applied.**"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:8
msgid "Under *Automations*,  click on *Create* and set the following rules:"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:10
msgid "*Model*: Lead/Opportunity"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:11
msgid "*Active*: On"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:12
msgid "*Trigger*: On Creation & Update"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:13
msgid "*Apply on*: Country > Country Name = Belgium"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:14
#: ../../studio/use_cases/filters_status_bar.rst:53
msgid "*Action To Do*: Update the Record"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:15
msgid "*Data to Write*: Lead/Opportunity > Value > 3"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:22
msgid "Check :doc:`this doc <filters_status_bar>` in order to have another automated action example."
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:25
msgid ":doc:`../concepts/understanding_automated_actions`"
msgstr ""

#: ../../studio/use_cases/automated_actions.rst:26
#: ../../studio/use_cases/filters_status_bar.rst:61
#: ../../studio/use_cases/models_fields.rst:138
#: ../../studio/use_cases/views.rst:28
msgid ":doc:`../concepts/understanding_general`"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:3
msgid "Advanced Use Cases: Filters and Status Bar"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:5
msgid "**Case scenario 1: on Sales, set a filter on Belgian customers and define it as the default one (the user should still be able to unset the filter).**"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:8
msgid "On your customer’s page, use *Filters* > *Add Custom Filter* to group customers by country. Now, under *Favorites*, *Save Current Search* enabling *Use by default* and *Save*."
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:15
msgid "On *Filter Rules* in Studio mode, select the respective filter and enable *Default Filter*."
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:21
msgid "**Case scenario 2: add a status bar on the product form to manage its life cycle. Set the values: ‘Prototype’, ‘In use’ and ‘Deprecated’. By default, the Kanban view must be grouped by status.**"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:26
msgid "On your product form, *Add a pipeline status bar* and name its values. Status bars are *selection* fields that give you the ability to follow a specific flow. They are useful to show you the progress that has been made."
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:28
msgid "On the *Views* menu, access *Kanban* and, under its *View* options, set the *Default Group by* as *Pipeline status bar*."
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:34
msgid "Now, open your product form and set the right status for that product. As you move products throughout stages (also through the product’s form), stages are shown in the Kanban view."
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:38
msgid "To make modifications in the pipeline status bar, for example, remember to go back to *Form View*."
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:44
msgid "**Case scenario 2.a: when a product goes from ‘In use’ to ‘Deprecate’, set its cost to 0€.**"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:46
msgid "Create an :doc:`automated action <../concepts/understanding_automated_actions>` with the selected values:"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:49
msgid "*Model*: Product Template"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:50
msgid "*Trigger*: On Update"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:51
msgid "*First Domain*: Pipeline status bar = In use"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:52
msgid "*Second Domain*: Pipeline status bar = Deprecated"
msgstr ""

#: ../../studio/use_cases/filters_status_bar.rst:54
msgid "*Data to Write*: Cost (Product Template) > Value > 0"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:3
msgid "Advanced Use Cases: Creating Models and Adding Fields"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:5
msgid "**Case scenario 1: on the leads’ form, if the chosen country is France, show a field 'Pay by check?'**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:8
msgid "On your leads’ form, add a *Related Field* to *Country > Country Name*."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:10
msgid "Now, add a *Checkbox* field and define its invisibility options as *Country* (carefully select the one just created) *> is not = > France.*"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:11
msgid "You can now hide the related field created (*Country*) if you wish."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:19
msgid "Another approach is to use the country’s ID. To do so, go to :menuselection:`Contacts --> Configuration --> Countries`, select France (for example), and on the URL check its *ID*."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:21
msgid "The related field invisibility path should now be *Country* (carefully select the one just created) *> is not = > 75*."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:22
msgid "Again, hide the related field with the country’s ID if you prefer."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:28
msgid "**Case scenario 2: create a model called 'Properties' and add fields called: company, value, name, address, active, image.**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:31
msgid "From the dashboard, (optionally) start a new module. Then, click on *Edit Menu* and start a *New Menu* (model). Set your menu name and *Confirm*. Now, on its form, drag & drop the necessary fields."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:39
msgid "**Case scenario 2.a: now, you would like to have a model called 'Regions' to which each property must be linked. And, on 'Regions', you would like to see the properties for each region.**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:43
msgid "Go to *Edit Menu > New Menu* and create your menu, calling it *Regions*. Add the necessary fields on its form by dragging & dropping them."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:45
msgid "Now, in the form view of *Properties*, add a *Many2one* field with a relation to your model *Region*."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:48
msgid "The *Existing Fields* are the ones that are on the current model but not yet in the view."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:60
msgid "Now, go to the model *Regions*, select the form view, and add a status button selecting *Regions (Properties)* as your relational field."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:62
msgid "*Status buttons* are computed fields, meaning that they count the numbers of records on the related model, and allow you to access them."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:69
msgid "When searching for relations, click on *Search more* and filter it by *Custom*. This way you avoid creating duplicates."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:76
msgid "**Case scenario 2.b: in the model 'Properties', show all the tags as checkboxes instead of tags.**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:78
msgid "Once the field *Tags* is added to the form, select it and, under its *Properties > Widgets*, choose *Checkboxes*."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:85
msgid "**Case scenario 3: on the leads’ form, add a selection field with the values:'Tags' & 'List' & 'Checkboxes'. According to the value of the field, show tags as many2many_tags, many2many_radio, or many2many(_list).**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:89
msgid "In your form view, add a *Tags* field and relate it to *Partners Tag*. Under *Properties*, define its *Widget* as *Many2many*. Do the same process another 2 times for *Checkboxes* and *Tags*."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:96
msgid "Now, add a *Selection* field and the necessary values."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:99
msgid "Continue by selecting your *Tags* fields, one by one, to set their *Invisible* options according to their *Widget*. In the example below, the invisibility rule for the *Partner Tags* is set as: *Select Tag type > is not = > Tags.*"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:105
msgid "**Case scenario 4: on a quotation’s form, add a selection field called 'Manager Validation' with the values: ‘Accepted’ and ‘Refused’. Only a sales manager can see it, and the field should be set as mandatory if the untaxed amount is higher than 500€.**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:109
msgid "On your quotation form, add a *Selection* field with the values *Accepted* and *Refused*. Set its *Required* condition as *Untaxed Amount > 500* and the *Limit visibility to groups* as *Sales / Administrator* or managers."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:117
msgid "**Case scenario 5: change the tooltip of a field for all views.**"
msgstr ""

#: ../../studio/use_cases/models_fields.rst:119
msgid "Activate the :doc:`Developer mode <../../general/developer_mode/activate>` and open Studio."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:122
msgid "Select the necessary field and, under *Properties*, click on *More* to write your tooltip message on *Field Help*. The tooltip message is the explanatory message shown when the user hovers the field. The message here written is displayed on all views forms where the field is added."
msgstr ""

#: ../../studio/use_cases/models_fields.rst:129
msgid "The *Field Help* message can only be applied to *new* fields. If you would like to change/apply a tooltip for a specific field, use the *Help Tooltip* option under *Properties*."
msgstr ""

#: ../../studio/use_cases/views.rst:3
msgid "Advanced Use Cases: Views"
msgstr ""

#: ../../studio/use_cases/views.rst:5
msgid "**Case scenario 1: in Sales, show orders in a Kanban View instead of a List View.**"
msgstr ""

#: ../../studio/use_cases/views.rst:7
msgid "From the Sales page, access Studio and, under *Views*, set the *Kanban* option as the default one."
msgstr ""

#: ../../studio/use_cases/views.rst:14
msgid "**Case scenario 2: allow for the list of leads to be edited inline without having to switch to the form view.**"
msgstr ""

#: ../../studio/use_cases/views.rst:19
msgid "On the *List View*, under *View* > *Editable*, choose between *New record on top* or *New record at the bottom*. This way, besides defining the order in which new records are displayed in the view, you are able to edit them."
msgstr ""

#: ../../studio/use_cases/views.rst:21
msgid "If the field is left blank, no editing is possible and records are shown based on your column preferences on the lead's page (front-end)."
msgstr ""
